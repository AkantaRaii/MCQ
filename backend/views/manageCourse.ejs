<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Courses</title>
    <link rel="stylesheet" href="/css/course.css">
    <link rel="stylesheet" href="/css/manageCourse.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<body>
    <div class="dashboard-container">
        <!-- Breadcrumb navigation -->
        <nav class="breadcrumb">
            <a href="/admin/courses"><i class="fas fa-home"></i> Courses</a>
            <i class="fas fa-chevron-right"></i>
            <a href="/admin/manageCourse">Manage Courses</a>
        </nav>

        <header class="dashboard-header">
            <h1>Manage Courses</h1>
        </header>

        <div class="manage-courses-container">
            <!-- Check if courses list is empty -->
            <% if (courses.length === 0) { %>
                <div class="empty-state">
                    <i class="fas fa-book-open empty-icon"></i>
                    <h2>No Courses Available</h2>
                    <p>Get started by adding your first course below</p>
                </div>
            <% } else { %>
                <div class="hint-message">
                    <i class="fas fa-info-circle"></i>
                    Double-click on a course to edit it
                </div>
                
                <div class="courses-list">
                    <% courses.forEach((course, index) => { %>
                        <div class="course-item" id="card-<%= course.course_id %>" ondblclick="makeEditable(<%= course.course_id %>)">
                            <div class="course-number"><%= index + 1 %></div>
                            <span class="course-name" id="text-<%= course.course_id %>"><%= course.course_name %></span>
                            <div class="course-actions">
                                <button id='edit-button-<%= course.course_id %>' class="action-btn edit-btn" onclick="makeEditable(<%= course.course_id %>); return false;">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button id='delete-button-<%= course.course_id %>' class="action-btn delete-btn" 
                                    onclick="event.stopPropagation(); deleteCourse(<%= course.course_id %>, '<%= course.course_name %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    <% }); %>
                </div>
            <% } %>
        </div>

        <div class="add-course-form">
            <input type="text" id="newEntry" placeholder="Enter course name" 
                   onkeypress="if(event.key === 'Enter') addCourse()">
            <button class="add-course-btn" onclick="addCourse()">
                <i class="fas fa-plus"></i> Add New Course
            </button>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="overlay" class="overlay">
        <div class="modal">
            <div class="modal-content">
                <i class="fas fa-exclamation-triangle warning-icon"></i>
                <h3>Confirm Deletion</h3>
                <p>Type <strong>"delete"</strong> to confirm</p>
                <input type="text" id="confirmInput" placeholder="Type 'delete'">
                <div class="modal-actions">
                    <button id="confirmDelete" class="confirm-btn">Delete</button>
                    <button id="cancelDelete" class="cancel-btn">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function addCourse() {
            const courseName = document.getElementById('newEntry').value.trim();
            console.log(courseName);
            if (!courseName) {
                alert("Please enter a course name.");
                return;
            }

            try {
                const response = await fetch('/admin/addCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ course: courseName })
                });

                const data = await response.json();
                console.log(data);
                if (response.ok) {
                    // Dynamically add the new course to the UI
                    const courseList = document.querySelector('.courses-list');
                    const existingCourses = courseList.querySelectorAll('.course-item'); // Get all existing course cards
                    const newIndex = existingCourses.length + 1; // Calculate the new index

                    const newCourse = document.createElement('div');    
                    newCourse.classList.add('course-item');
                    newCourse.id = `card-${data.course.course_id}`;
                    newCourse.innerHTML = `
                        <div class="course-number">${newIndex}</div>
                        <span class="course-name" id="text-${data.course.course_id}">${data.course.course_name}</span>
                        <div class="course-actions">
                            <button id='edit-button-${data.course.course_id}' class="action-btn edit-btn" onclick="makeEditable(${data.course.course_id}); return false;">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button id='delete-button-${data.course.course_id}' class="action-btn delete-btn" onclick="event.stopPropagation(); deleteCourse(${data.course.course_id},'${data.course.course_name}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    `;
                    
                    // Append the new course card to the list
                    courseList.appendChild(newCourse);

                    // Clear input field
                    document.getElementById('newEntry').value = '';

                } else {
                    alert('Error: ' + data.message);
                }
            } catch (error) {
                console.error('Error adding course:', error);
                alert('Failed to add course.');
            }
        }

        let currentCourseId = null;
        //delete 
        async function deleteCourse(courseId, course) {
            currentCourseId = courseId;
            document.querySelector('#overlay p').innerHTML = 
                `Type <span style="color: red; font-weight: bold;">"delete"</span> to confirm deleting course: 
                <span style="color: blue; font-weight: bold;">${course}</span>`;
            document.getElementById('overlay').style.display = 'flex';
        }

        document.getElementById('confirmInput').addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                document.getElementById('confirmDelete').click(); // Trigger the click event of the Delete button
            }
        });
        document.getElementById('confirmDelete').addEventListener('click', async () => {
            const input = document.getElementById('confirmInput').value;
            if (input.toLowerCase() === 'delete') {
                try {
                    const response = await fetch('/admin/deleteCourse', {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ courseId: currentCourseId })
                    });

                    const data = await response.json();
                    if (response.ok) {
                        // Remove the course from the UI
                        document.getElementById(`card-${currentCourseId}`).remove();
                    } else {
                        alert('Error: ' + data.message);
                    }
                } catch (error) {
                    console.error('Error deleting course:', error);
                    alert('Failed to delete course.');
                } finally {
                    document.getElementById('overlay').style.display = 'none';
                    document.getElementById('confirmInput').value = '';
                }
            } else {
                alert('You must type "delete" to confirm.');
            }
        });

        document.getElementById('cancelDelete').addEventListener('click', () => {
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('confirmInput').value = '';
        });

        //making button editable
        function makeEditable(courseId) {
            const editbutton = document.getElementById('edit-button'+'-'+courseId);
            const deletebutton = document.getElementById('delete-button'+'-'+courseId);
            editbutton.style.display = 'none';
            deletebutton.style.display = 'none';

            // Get the span element containing the course name
            const spanElement = document.getElementById(`text-${courseId}`);
            const courseName = spanElement.innerText;

            // Replace the span with an input element
            const inputElement = document.createElement('input');
            inputElement.type = 'text';
            inputElement.value = courseName;
            inputElement.id = `edit-text-${courseId}`;
            
            // Apply styles to make it blend with the card
            inputElement.style.border = 'none';
            inputElement.style.outline = 'none';
            inputElement.style.fontSize = 'inherit';
            inputElement.style.background = 'transparent';
            inputElement.style.padding = '5px';
            inputElement.style.borderRadius = '5px';
            inputElement.style.minWidth = '50px'; // Minimum width to avoid collapsing
            inputElement.style.width = `${courseName.length + 2}ch`; // Adjust width dynamically
            inputElement.style.maxWidth = '100%'; // Prevent overflow
            inputElement.style.resize = 'none'; // No manual resize

            // Replace the span with the input element
            spanElement.replaceWith(inputElement);

            // Display a message to hit enter
            const message = document.createElement('small');
            message.innerText = 'Press Enter to save changes';
            message.style.display = 'block';
            message.style.marginTop = '5px';
            message.style.color = 'gray';
            message.style.fontSize = '12px';
            message.id = `edit-message-${courseId}`;
            inputElement.after(message);
            message.style.display = 'inline-block';
            // Handle Enter key press
            inputElement.addEventListener('keypress', function(event) {
                if (event.key === 'Enter') {
                    saveCourseName(courseId, inputElement.value);
                    message.remove(); // Remove the message after saving
                    editbutton.style.display='inline-block';
                    deletebutton.style.display='inline-block';
                }
            });

            // Dynamically update width as user types
            inputElement.addEventListener('input', function() {
                inputElement.style.width = `${inputElement.value.length + 2}ch`;
            });

            // Auto-focus on the input
            inputElement.focus();
        }

        async function saveCourseName(courseId, newCourseName) {
            // Perform an AJAX request or any other action to save the new course name
            console.log(`Saving new course name for course ${courseId}: ${newCourseName}`);

            // Replace the input field with the updated span
            const inputElement = document.getElementById(`edit-text-${courseId}`);
            const spanElement = document.createElement('span');
            spanElement.id = `text-${courseId}`;
            spanElement.innerText = newCourseName;

            inputElement.replaceWith(spanElement);

            try{
                await fetch('/admin/updateCourse',{
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ courseId, course: newCourseName })
                });
            }catch(error){
                console.error('Error updating course:', error);
                alert('Failed to update course.');
            }
        }
    </script>
</body>
</html>
